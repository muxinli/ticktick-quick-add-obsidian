/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var T=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var E=(s,i)=>{for(var e in i)T(s,e,{get:i[e],enumerable:!0})},_=(s,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of b(i))!I.call(s,n)&&n!==e&&T(s,n,{get:()=>i[n],enumerable:!(t=P(i,n))||t.enumerable});return s};var A=s=>_(T({},"__esModule",{value:!0}),s);var R={};E(R,{default:()=>k});module.exports=A(R);var r=require("obsidian");var l=require("obsidian"),m={accessToken:"",clientId:"",clientSecret:""},u=class extends l.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"TickTick API Settings"}),new l.Setting(e).setName("Client ID").setDesc("Enter your TickTick Client ID from the Developer Console.").addText(t=>t.setPlaceholder("Your Client ID").setValue(this.plugin.settings.clientId||"").onChange(async n=>{this.plugin.settings.clientId=n.trim(),await this.plugin.saveSettings()})),new l.Setting(e).setName("Client Secret").setDesc("Enter your TickTick Client Secret (input is masked).").addText(t=>(t.inputEl.type="password",t.setPlaceholder("\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022").setValue(this.plugin.settings.clientSecret||"").onChange(async n=>{this.plugin.settings.clientSecret=n.trim(),await this.plugin.saveSettings()}),t)),new l.Setting(e).setName("Access Token").setDesc("Your current access token. (Reauthenticate if expired.)").addText(t=>t.setPlaceholder("Access token will appear here").setValue(this.plugin.settings.accessToken||"").onChange(async n=>{this.plugin.settings.accessToken=n.trim(),await this.plugin.saveSettings()})),new l.Setting(e).setName("Refresh Token").setDesc("Stored refresh token (for debugging).").addText(t=>t.setPlaceholder("Refresh token").setValue(this.plugin.settings.refreshToken||"").onChange(async n=>{this.plugin.settings.refreshToken=n.trim(),await this.plugin.saveSettings()})),new l.Setting(e).setName("Connect to TickTick").setDesc("Click to open the OAuth authorization URL in your browser.").addButton(async t=>{t.setButtonText("Connect").onClick(async()=>{if(!this.plugin.settings.clientId){new l.Notice("Please enter your Client ID first.");return}await this.plugin.startAuthFlow()})}),new l.Setting(e).setName("Authorization Code").setDesc("Paste the authorization code from TickTick here to obtain an access token.").addText(t=>t.setPlaceholder("Enter authorization code").onChange(async n=>{n.trim()&&(await this.plugin.exchangeAuthCodeForToken(n.trim()),t.setValue(""),this.display())}))}};function w(s){let i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e="";for(let t=0;t<s;t++)e+=i.charAt(Math.floor(Math.random()*i.length));return e}async function v(s){let e=new TextEncoder().encode(s);return await crypto.subtle.digest("SHA-256",e)}function D(s){let i=new Uint8Array(s),e="";return i.forEach(t=>e+=String.fromCharCode(t)),btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}async function N(){let s=w(64),i=await v(s),e=D(i);return{codeVerifier:s,codeChallenge:e}}function U(s,i){let e=i,t=i,n=s.lineCount();for(;e>0&&s.getLine(e-1).trim()!=="";)e--;for(;t<n-1&&s.getLine(t+1).trim()!=="";)t++;let o="";for(let c=e;c<=t;c++)o+=s.getLine(c)+`
`;return{text:o.trim(),start:e,end:t}}function f(s,i,e){console.log(JSON.stringify({timestamp:new Date().toISOString(),plugin:"ticktick-integration",action:i,...e,clientId:s.settings.clientId?"***":void 0,accessToken:s.settings.accessToken?"***":void 0}))}var k=class extends r.Plugin{async onload(){console.log("Loading TickTick Plugin"),await this.loadSettings(),this.addSettingTab(new u(this.app,this)),this.addCommand({id:"create-ticktick-task",name:"Create TickTick Task from Paragraph",editorCallback:async(e,t)=>{let n=e.getCursor();if(!t.file){new r.Notice("No file found for the current view!");return}let{text:o,start:c,end:a}=U(e,n.line);if(!o){new r.Notice("No paragraph text found!");return}let d=w(8),h=`#ticktick ${o} ^${d}`;e.replaceRange(h,{line:c,ch:0},{line:a,ch:e.getLine(a).length});let g=this.app.vault.getName(),y=t.file.path,S=`obsidian://advanced-uri?vault=${encodeURIComponent(g)}&filepath=${encodeURIComponent(y)}&block=${encodeURIComponent(d)}`,C=`${o}

[Open in Obsidian](${S})`,x=o.length>50?o.substring(0,50)+"...":o;await this.ensureFreshToken();try{(await this.createTicktickTask(x,C)).success?new r.Notice("TickTick task created successfully!"):new r.Notice("Failed to create TickTick task.")}catch(p){f(this,"task_creation_failed",{error:p.message}),new r.Notice(`Failed to create task: ${p.message}
Check console for details.`)}}})}onunload(){console.log("Unloading TickTick Plugin")}async startAuthFlow(){let e=this.settings.clientId;if(!e){new r.Notice("Please enter your Client ID in the settings.");return}let t="http://127.0.0.1:3000/callback",n=encodeURIComponent("tasks:read tasks:write"),{codeVerifier:o,codeChallenge:c}=await N(),a=w(32);this.settings.tempCodeVerifier=o,this.settings.tempState=a,await this.saveSettings();let d=`https://ticktick.com/oauth/authorize?client_id=${e}&redirect_uri=${encodeURIComponent(t)}&response_type=code&scope=${n}&code_challenge=${c}&code_challenge_method=S256&state=${a}`;window.open(d,"_blank"),new r.Notice("OAuth flow initiated. Please complete it in your browser.")}async exchangeAuthCodeForToken(e){let t="https://ticktick.com/oauth/token",n="http://127.0.0.1:3000/callback",o=this.settings.clientId,c=this.settings.clientSecret,a=this.settings.tempCodeVerifier;if(!a||!o||!c){new r.Notice("Missing required credentials. Please update your settings.");return}let d=new URLSearchParams({grant_type:"authorization_code",code:e,redirect_uri:n,client_id:o,client_secret:c,code_verifier:a});try{let h=await(0,r.requestUrl)({url:t,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64)"},body:d.toString()});if(h.status===200){let g=h.json;this.settings.accessToken=g.access_token,this.settings.refreshToken=g.refresh_token,this.settings.tokenExpiry=Date.now()+g.expires_in*1e3*.85,await this.saveSettings(),new r.Notice("TickTick access token obtained successfully!")}else console.error("Token exchange error (status):",h.status),console.log("response.json:",h.json),console.log("response.text:",h.text),new r.Notice("Failed to obtain access token.")}catch(h){console.error("Error during token exchange:",h),new r.Notice("Error during token exchange.")}}async refreshAccessToken(){if(!this.settings.refreshToken)throw new Error("No refresh token available. Please reconnect.");let e="https://ticktick.com/oauth/token",t=this.settings.clientId,n=this.settings.clientSecret,o=new URLSearchParams({grant_type:"refresh_token",refresh_token:this.settings.refreshToken,client_id:t,client_secret:n});try{let c=await(0,r.requestUrl)({url:e,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded","X-Requested-With":"XMLHttpRequest"},body:o.toString()});if(c.status===200){let a=c.json;this.settings.accessToken=a.access_token,this.settings.refreshToken=a.refresh_token,this.settings.tokenExpiry=Date.now()+a.expires_in*1e3*.85,await this.saveSettings(),new r.Notice("Access token refreshed successfully!")}else throw console.error("Refresh token error:",c.text),new Error("Failed to refresh token")}catch(c){throw console.error("Error refreshing access token:",c),c}}async ensureFreshToken(){if(this.settings.tokenExpiry&&Date.now()>this.settings.tokenExpiry){f(this,"token_expired",{tokenExpiry:this.settings.tokenExpiry});try{await this.refreshAccessToken()}catch(e){throw new r.Notice("Reauthentication required. Please reconnect to TickTick."),e}}}async createTicktickTask(e,t){let n=this.settings.accessToken;if(!n)return new r.Notice("No access token found. Please connect to TickTick in the settings."),{success:!1};let o="https://api.ticktick.com/open/v1/task",c={title:e,content:t};try{f(this,"task_creation_request",{endpoint:o,title:e});let a=await(0,r.requestUrl)({url:o,method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(c)});return a.status===200?{success:!0}:(console.error("TickTick API error (status):",a.status),console.log("response.json:",a.json),console.log("response.text:",a.text),{success:!1})}catch(a){return console.error("TickTick API error:",a),{success:!1}}}async loadSettings(){this.settings=Object.assign({},m,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
